函数
====

定义: 函数是指将一组语句的集合通过一个名字(函数名)封装起来,要想执行这个函数,只需要调用其函数名即可**

特性

1. 减少重复代码
2. 使程序变得可扩展
3. 使程序变得易维护

定义函数

.. code:: python

    # x为函数的参数
    def sum(x,y): # x,y为形参  # 函数名
        print(x+y)

    sum(1,2)  # 1,2 实参  # 调用函数

函数的返回值
------------

函数的返回值需要使用到\ ``return``\ 这个关键字,获取函数的执行结果.

注意:

1. 函数在执行过程中只要遇到return语句,就会停止执行并返回结果
2. 如果未在函数中指定return,那这个函数的返回值就是None

.. code:: python

    >>> def re():
    ...   if 1==1:
    ...     return True
    ...   else:
    ...     return False
    ...
    >>> re()
    True

函数return后面是什么值,re就返回什么值,如果没有指定return返回值,那么会返回一个默认的参数\ ``None``

在函数中,当\ ``return``\ 执行完成之后,\ ``return``\ 后面的代码是不会执行的

.. code:: python

    >>> def re():
    ...   print("123")
    ...   return True
    ...   print("abc")
    ...
    >>> re()
    123
    True

函数参数
--------

**形参** :
变量只有在被调用时才分配内存单元,在调用结束时,即刻释放所分配的内存单元.因此,形参只在函数内部有效.函数调用结束返回主调函数后则不能再使用该形参变量.

**实参** : 可以是常量,变量,表达式,函数等,无论实参是何种类型的量,
在进行函数调用时,它们都必须有确定的值,以便把这些值传送给形参.因此应预先用赋值,输入等方式使参数获得确定值

默认参数
~~~~~~~~

函数定义中定义参数默认值

如果我们在创建函数的时候给函数定义了参数,那么在调用函数的时候如果不填写参数,程序就会报错

.. code:: python

    >>> def re():
    ...   print(x)
    KeyboardInterrupt
    >>> def re(x):
    ...   print(x)
    ...
    >>> re()
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: re() missing 1 required positional argument: 'x'
    >>>

要解决这个问题可以给函数的参数指定一个默认值,
指定函数的默认值需要在\ ``def``\ 这一行指定,指定之后,
当调用这个函数时,不传入参数,就是使用参数默认值

.. code:: python

    >>> def ret(x="Hello World"):
    ...   print(x)
    ...
    >>> ret()
    Hello World
    # 如果指定默认值,那么实际参数替换掉形式参数
    >>> ret("Pythoner")
    Pythoner

位置参数
~~~~~~~~

传入参数的值是按照顺序依次赋值过去的

.. code:: python

    # x == 形式参数,形式参数有几个,那么实际参数就要传几个,默认参数除外
    >>> def ret(x):
    ...   print(x)
    ...
    # "Hello World"实际参数
    >>> print(ret("Hello World"))
    Hello World
    None

关键字参数
~~~~~~~~~~

正常情况下，给函数传参数要按顺序，不想按顺序就可以用关键参数，只需指定参数名即可，\ **但记住一个要求就是，关键参数必须放在位置参数之后。**

stu_register(age=22,name=‘alex’,course=“python”,)

.. code:: python

    >>> def ret(a,b,c):
    ...   print(a,"a")
    ...   print(b,"b")
    ...   print(c,"c")
    ...
    >>> ret(b="bbb",a="aaa",c="ccc")
    aaa a
    bbb b
    ccc c

默认情况在函数ret括号内如果要输入函数参数的值,是要按照顺序来的,但是如果在ret括号内制定的参数的值,那么就不需要按照顺序来了

如果给函数创建了默认值,那么有默认值的这个参数必须在最后面定义,不能够在没有默认参数的值的前面.

动态参数(非固定参数)
~~~~~~~~~~~~~~~~~~~~

**动态参数把接收过来的实际参数当做一个元组,每一个参数都是元组中的一个元素.**

非固定参数 ``(*args)``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

定义第一种动态参数需要在参数前面加上一个\ ``*``\ 号

.. code:: python

    >>> def ret(*args):  # *args 会把传入的参数变成一个元组形式
    ...   print(args,type(args))
    ...
    >>> ret(11,22,33)
    (11, 22, 33) <class 'tuple'>

非固定关键字参数 ``(**kwargs)``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

定义非固定关键字参数需要在参数前面加上两个 ``*`` 号,给参数传参的时候是一个key对应一个value,
相当于一个字典的键值对,而且返回的类型就是 **字典类型**.

**使用两个星号可以将参数收集到一个字典中,参数的名字是字典的键,对应参数的值是字典的值.**

.. code:: python

    >>> def ret(**kwargs):
    ...   print(kwargs,type(kwargs))
    ...
    >>> ret(k1=123,k2=456)
    {'k1': 123, 'k2': 456} <class 'dict'>

``(*args, **kwargs)``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

万能动态参数,可接受所有传参

.. code:: python

    >>> def ret(*args,**kwargs):
    ...   print(args,type(args))
    ...   print(kwargs,type(kwargs))
    ...
    >>> ret(11,222,333,k1=111,k2=222)
    (11, 222, 333) <class 'tuple'>
    {'k1': 111, 'k2': 222} <class 'dict'>

字典🌰

.. code:: python

    >>> def arg(**kwargs):
    ...   print(kwargs,type(kwargs))
    ...
    >>> dic = {"k1":123,"k2":456}
    >>> arg(k1=dic)
    {'k1': {'k1': 123, 'k2': 456}} <class 'dict'>
    >>> arg(**dic)
    {'k1': 123, 'k2': 456} <class 'dict'>

避免可变参数的修改
~~~~~~~~~~~~~~~~~~

如果不想在函数内部修改参数值而影响到外部对象的值,我们可以使用切片的方式进行参数的传递

.. code:: python

    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    L = ['a','b']

    def changer(L):
        L[0] = 0

    print(L)
    changer(L)
    """
    ['a','b']
    [0,'b']
    """
    # changer(L[:])
    """
    ['a','b']
    ['a','b']
    """
    print(L)

参数解包
~~~~~~~~

::

    In [2]: def f(a, b, c, d): print(a, b, c, d)
    In [3]: args = (1, 2)
    In [4]: args += (3, 4)
    In [5]: f(*args)
    1 2 3 4

又或者使用

::

    def f(a, b, c, d): print(a, b, c, d)
    args = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
    f(**args)

参数书写位置
~~~~~~~~~~~~

函数调用中: ``位置参数 -> 关键字参数 -> 元组形式 -> 字典形式``
函数定义头部: ``一般参数 -> 默认参数 -> 元组形式 -> 字典形式``

.. code:: python

    >>> def func(name,age=None,*args,**kwargs):
    ...   print(name,age,args,kwargs)
    ...
    >>> func('yang',18,*(1,2,3),**{'blog':'xxx.com'})
    yang 18 (1, 2, 3) {'blog': 'xxx.com'}

函数的普通参数实例:发送邮件
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: python

    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    def email(mail):
        import smtplib
        from email.mime.text import MIMEText
        from email.utils import formataddr

        msg = MIMEText('邮件内容','plain','utf-8')
        # 发件人信息,前面为 发件人,后面发件人邮箱
        msg['From'] = formataddr(["测试",'brave0517@163.com'])
        # 收件人
        msg['To'] = formataddr(["aha",'adsda@163.com'])
        # 主题
        msg['Subject'] = "nihao"

        server = smtplib.SMTP("smtp.163.com",25)
        server.login("brave0517@163.com","xxxxxxxx")
        server.sendmail('brave0517@163.com',[mail,],msg.as_string())
        server.quit()

    email("493535459@qq.com")

执行上面的脚本,会给邮箱\ ``493535459@qq.com``\ 发送邮件

全局变量和局部变量
------------------

子程序中定义的变量称为\ **局部变量**,在程序的一开始定义的变量称为\ **全局变量**.

全局变量作用域是整个程序,局部变量作用域是定义该变量的子程序.

当全局变量与局部变量同名时

在定义局部变量的子程序内,局部变量起作用;在其他地方全局变量起作用.

.. code:: python

    # 全局变量
    n1 = 1
    def num():
        # 局部变量
        n2 = 2
        print(n1)
        print(n2)
    num()

定义的全局变量都可以在函数内调用,但是不能在函数内修改,局部变量也不能够直接调用,如果要在函数内修改全局变量,那么就需要用到关键字\ ``global``

.. code:: python

    n1 = 1
    def num():
        n2 = 2
        global n1
        n1 = 3
        print(n1)
        print(n2)
    num()

nonlocal语句
------------

``nonlocal``\ 是用来修改嵌套作用域中的变量,类似于\ ``global``,只需要在嵌套函数中声明变量名即可,
但是这个变量名是必须已经存在的否则就会报错,如果要修改的变量在作用域中查找不到,那么不会继续到全局或内置作用域中查找

.. code:: python

    In [1]: def func1(arg1):
       ...:     n = arg1
       ...:     print(n)
       ...:     def func2():
       ...:         nonlocal n
       ...:         n += 1
       ...:     func2()
       ...:     print(n)
       ...:
    In [2]: func1(10)
    10
    11

递归
----

在函数内部,可以调用其他函数.如果一个函数在内部调用自身本身,这个函数就是递归函数.

递归特性

1. 必须有一个明确的结束条件
2. 每次进入更深一层递归时,问题规模相比上次递归都应有所减少
3. 递归效率不高,递归层次过多会导致栈溢出(在计算机中,函数调用时通过栈(stack)这种数据结构实现的,每当进入一个函数调用,栈就会增加一层帧,每当函数返回,栈就会减一层帧.由于栈的大小不是无限的,所以,递归调用的次数过多,会导致栈溢出)

`堆栈扫盲 <http://www.cnblogs.com/lln7777/archive/2012/03/14/2396164.html>`__

匿名函数(Lambda表达式)
----------------------

Lambda(Lambda
expressions)表达式是用lambda关键字创建的匿名函数,Lambda函数可以用于任何需要函数对象的地方,在语法上,它被局限于只能有一个单独的表达式

匿名函数主要是和其他函数搭配使用

使用\ ``Lambda``\ 表达式创建函数

.. code:: python

    >>> f = lambda x,y : x+y
    >>> f(1,2)
    3

使用def创建函数

.. code:: python

    >>> def f(x,y):
    ...   return x + y
    ...
    >>> f(1,2)
    3

    ---
    res = map(lambda x:x**2,[1,5,7,4,8])
    for i in res:
        print(i)

    输出

    1
    25
    49
    16
    64

对于比较简单的函数我们可以通过lambda来创建,它的好处是缩短行数

lambda创建的函数和def创建的函数对应关系如图所示:

.. figure:: http://oi480zo5x.bkt.clouddn.com/python-011-lambda.jpg
   :alt: python-011-lambda

   python-011-lambda

嵌套lambda和作用域
~~~~~~~~~~~~~~~~~~

.. code:: python

    >>> def action(x):
    ...   return (lambda y:x+y)
    ...
    >>> act = action(99)
    >>> print(act)
    <function action.<locals>.<lambda> at 0x101ce08c8>
    >>> result = act(2)
    >>> print(result)
    101

``lambda``\ 也能够获取到任意上层\ ``lambda``\ 中的变量

.. code:: python

    >>> action = lambda x : (lambda y : x+y)
    >>> act = action(99)
    >>> print(act)
    <function <lambda>.<locals>.<lambda> at 0x101ce07b8>
    >>> print(act(3))
    102

函数式编程介绍
--------------

函数是python內建支持的一种封装,我们通过把大段代码拆成函数,通过一层一层的函数调用,就可以把复杂任务分解成简单的任务,这种分解可以称之为面向过程的程序设计.函数就是面向过程的程序设计的基本单元.

**函数式编程中的函数这个术语不是指计算机中的函数(实际上是Subroutine),而是指数学中的函数,即自变量的映射.也就是说一个函数的值仅决定于函数参数的值,不依赖其他状态.比如sqrt(x)函数计算x的平方根,只要x不变,不论什么时候调用,调用几次,值都是不变的.**

python对函数式编程提供部分支持.由于python允许使用变量,因此,python不是纯函数式变成语言.

定义:

简单说,“函数式编程”是一种“编程范式”(programming
paradigm),也就是如何编写程序的方法论.

主要思想是把运算过程尽量写成一系列嵌套的函数调用.举例来说,现在有这样一个数学表达式:

::

    (1+2)*3 - 4

传统的过程式编程,可能这样写

::

    var a = 1 + 2;
    var b = a * 3;
    var c = b - 4;

函数式编程要求使用函数,我们可以把运算过程定义为不同的函数,然后写成下面这样

::

    var result = subtract(multiply(add(1,2),3),4);

这样代码再演进下,可以变成这样子

::

    add(1,2).multiply(3).subtract(4)

这基本就是自然语言的表达了.再看下面的代码,大家应该一眼就能够明白它的意思吧

::

    merge([1,2],[3,4]).sort().search("2")

因此,函数式编程的代码更容易理解.

要想学好函数式编程,不要玩py,玩Erlang,Haskell

高阶函数
--------

变量可以指向函数,函数的参数能接收变量,那么一个函数就可以接收另一个函数作为参数,这种函数就称之为高阶函数

.. code:: python

    def add(x,y,f):
        return f(x) + f(y)

    res = add(3,-6,abs)
    print(res)

测试题
------

简述参数区别
~~~~~~~~~~~~

    简述普通参数,指定参数,默认参数,动态参数的区别

普通参数即是用户在调用函数时填入的参数,且参数位置必须与参数保持一致

指定参数即在用户调用函数的时候不需要按照函数中参数的位置所填写,指定参数需要指定参数对应的值

默认参数可以写在定义参数的后面,如果用户调用函数时没有指定参数,那么就会用默认参数,如果用户指定了参数,那么用户指定的参数就会代替默认参数

动态参数可以接受用户输入的任何参数,包括字典,列表,元组等数据类型

练习2
~~~~~

    计算传入字符串中数字,字母,空格以及其他字符的个数

.. code:: python

    ➜  python_test cat 011-exercise-3.py
    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    def var(s):
        all_num = 0
        space_num = 0
        digit_num = 0
        others_num = 0
        for i in s:
            if i.isdigit():
                digit_num += 1
            elif i.isspace():
                space_num += 1
            elif i.isalpha():
                all_num += 1
            else:
                others_num += 1
        return("字母: ",all_num,"空格: ",space_num,"数字: ",digit_num,"其他字符: ",others_num)
    num = var("13213 321 32 eaf adsf dasf dasf d4 4$%%&^%$*##@$#@$")
    print(num)

执行结果

.. code:: python

    ➜  python_test python3 011-exercise-3.py
    ('字母: ', 16, '空格: ', 8, '数字: ', 12, '其他字符: ', 15)

练习3
~~~~~

    写函数,判断用户传入的对象(字符串,列表,元组)长度是否大于5,如果大于5就返回True,如果小于5就返回False

.. code:: python

    # 定义一个函数num
    def num(x):
        # 判断函数的值如果长度大于5就返回True
        if len(x) > 5:
            return True
        # 否则就返回False
        else:
            return False
    ret = num(["asd","asdasd","asdasd","asdasd"])
    print(ret)
    ret = num("asdasdasd")
    print(ret)

练习4
~~~~~

    写函数,判断用户传入的对象(字符串,列表,元组)的每一个元素是否含有空内容,如果有空就返回False

.. code:: python

    ➜  python_test cat 011-exercise-4.py
    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    def num(x):
        # 遍历x里面的所有内容
        for n in x:
            # 数据类型转换为字符串
            n = str(n)
            # 如果有空格就返回False
            if n.isspace():
                return False
    ret = num(" ")
    print(ret)
    ret = num("adfa")
    print(ret)
    ret = num(["adsa","321",123," "])
    print(ret)

    ➜  python_test python3 011-exercise-4.py
    False
    None
    False

练习5
~~~~~

    写函数,检查传入列表的长度,如果大于2,那么仅保留前两个长度的内容,并将新内容返回给调用者

.. code:: python

    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    def num(x):
        # 如果列表中的长度大于2,那么就输出列表前两个内容,否则就返回一个空
        if len(x) > 2 :
            return x[:2]
        else:
            return ""
    print(num(["11","22","33"]))
    print(num(["33"]))

    ➜  python_test python3 011-exercise-5.py
    ['11', '22']

    ➜  python_test

练习6
~~~~~

    写函数,检查获取传入列表或元组对象的所有奇数位索引对应的元素,并将其作为新列表返回给调用者

.. code:: python

    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    def num(x):
        # 定义一个空列表用于接收奇数位索引的元素
        result = []
        # 循环输出列表中的所有元素值
        for n in range(len(x)):
            # 如果列表中的位置为奇数位索引就把值添加到result列表中
            if n % 2 == 1:
                result.append(x[n])
        # 返回result列表中的内容
        return result

    ret = num([11,22,33,44,55,66])
    print(ret)

    ➜  python_test python3 011-exercise-6.py
    [22, 44, 66]

练习7
~~~~~

    写函数,检查传入字典的每一个value的长度,如果大于2,那么仅保留前两个长度的内容,并将新内容返回给调用者

::

    dic = {"k1":"v1v1","k2": [1111,22,33,44]}

PS:字典中的value只能是字符串或列表

.. code:: python

    #!/usr/bin/env python
    # _*_ coding:utf-8 _*_

    dic = {"k1":"v1v1","k2": [1111,22,33,44]}

    def dictt(x):
        # 循环字典中所有的key
        for k in x.keys():
            # 如果字典中k对应的元素是字符串类型就进行下面的判断
            if type(x[k]) == str:
                # 如果元素的长度大于2
                if len(x[k]) > 2:
                    # 那么就让这个元素重新赋值,新的值只保留原来值得前两个
                    x[k]=x[k][0:2]
            # 如果字典中k对应的元素类型是列表,就进行下面的判断
            elif type(x[k]) == list:
                # 遍历列表中的值
                for i in x[k]:
                    # 把元素赋值给string变量
                    string = str(i)
                    # 如果元素的长度大于2
                    if len(string) > 2:
                        # 获取元素的索引值
                        num = x[k].index(i)
                        # 先把这个元素给删除
                        x[k].pop(x[k].index(i))
                        # 然后再添加一个新的元素,新元素的值保留原来元素的前两个
                        x[k].insert(num,string[:2])
        # 结果return出来
        return dic
    ret = dictt(dic)
    print(ret)


    ➜  python_test python3 011-exercise-7.py
    {'k2': ['11', 22, 33, 44], 'k1': 'v1'}
