协程
====

`alex 协程 <http://www.cnblogs.com/alex3714/articles/5248247.html#>`__

协程：

-  必须在只有一个单线程里实现并发
-  修改共享数据不需加锁
-  用户程序里自己保存多个控制流的上下文栈
-  一个协程遇到IO操作自动切换到其它协程

greenlet
--------

greenlet是一个用C实现的协程模块，相比与python自带的yield，它可以使你在任意函数之间随意切换，而不需把这个函数先声明为generator

.. code:: python

    # -*- coding:utf-8 -*-
    from greenlet import greenlet


    def test1():
        print(12)
        gr2.switch()
        print(34)
        gr2.switch()


    def test2():
        print(56)
        gr1.switch()
        print(78)


    gr1 = greenlet(test1)
    gr2 = greenlet(test2)
    gr1.switch()

Gevent
------

Gevent
是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是Greenlet,
它是以C扩展模块形式接入Python的轻量级协程。
Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。

.. code:: python

    import gevent

    def func1():
        print('\033[31;1m李闯在跟海涛搞...\033[0m')
        gevent.sleep(2)
        print('\033[31;1m李闯又回去跟继续跟海涛搞...\033[0m')

    def func2():
        print('\033[32;1m李闯切换到了跟海龙搞...\033[0m')
        gevent.sleep(1)
        print('\033[32;1m李闯搞完了海涛，回来继续跟海龙搞...\033[0m')


    gevent.joinall([
        gevent.spawn(func1),
        gevent.spawn(func2),
        #gevent.spawn(func3),
    ])

同步与异步的性能区别

.. code:: python

    import gevent

    def task(pid):
        """
        Some non-deterministic task
        """
        gevent.sleep(0.5)
        print('Task %s done' % pid)

    def synchronous():
        for i in range(1,10):
            task(i)

    def asynchronous():
        threads = [gevent.spawn(task, i) for i in range(10)]
        gevent.joinall(threads)

    print('Synchronous:')
    synchronous()

    print('Asynchronous:')
    asynchronous()

上面程序的重要部分是将task函数封装到Greenlet内部线程的gevent.spawn。
初始化的greenlet列表存放在数组threads中，此数组被传给gevent.joinall
函数，后者阻塞当前流程，并执行所有给定的greenlet。执行流程只会在
所有greenlet执行完后才会继续向下走。　　

monkey.patch_all()
~~~~~~~~~~~~~~~~~~

.. code:: python

    import sys
    import socket
    import time
    import gevent
    from gevent import socket,monkey
    monkey.patch_all()


    def server(port):
        s = socket.socket()
        s.bind(('0.0.0.0', port))
        s.listen(500)
        while True:
            cli, addr = s.accept()
            gevent.spawn(handle_request, cli)

    def handle_request(conn):
        try:
            while True:
                data = conn.recv(1024)
                print("recv:", data)
                conn.send(data)
                if not data:
                    conn.shutdown(socket.SHUT_WR)

        except Exception as  ex:
            print(ex)
        finally:
            conn.close()
    if __name__ == '__main__':
        server(8001)
