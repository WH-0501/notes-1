集合框架
========

早在Java 2中之前，Java就提供了特设类。比如：Dictionary, Vector, Stack,
和Properties这些类用来存储和操作对象组。

虽然这些类都非常有用，但是它们缺少一个核心的，统一的主题。由于这个原因，使用Vector类的方式和使用Properties类的方式有着很大不同。

集合框架被设计成要满足以下几个目标。

-  该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。
-  该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。
-  对一个集合的扩展和适应必须是简单的。

为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如：
LinkedList, HashSet, 和
TreeSet等,除此之外你也可以通过这些接口实现自己的集合。

集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：

-  接口：是代表集合的抽象数据类型。接口允许集合独立操纵其代表的细节。在面向对象的语言，接口通常形成一个层次。
-  实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构。
-  算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。

除了集合，该框架也定义了几个Map接口和类。Map里存储的是\ ``键值对``\ 。尽管Map不是collections，但是它们完全整合在集合中。

使用迭代器
----------

通常情况下，你会希望遍历一个集合中的元素。例如，显示集合中的每个元素。

一般遍历数组都是采用for循环或者增强for，这两个方法也可以用在集合框架，但是还有一种方法是采用迭代器遍历集合框架，它是一个对象，实现了Iterator
接口或ListIterator接口。

迭代器，使你能够通过循环来得到或删除集合的元素。ListIterator
继承了Iterator，以允许双向遍历列表和修改元素。

使用 ``Java Iterator``

这里通过实例列出\ ``Iterator``\ 和\ ``listIterator``\ 接口提供的所有方法。

遍历 ArrayList
~~~~~~~~~~~~~~

实例

.. code:: java

    import java.util.*;

    public class Test{
     public static void main(String[] args) {
         List<String> list=new ArrayList<String>();
         list.add("Hello");
         list.add("World");
         list.add("HAHAHAHA");
         //第一种遍历方法使用foreach遍历List
         for (String str : list) {            //也可以改写for(int i=0;i<list.size();i++)这种形式
            System.out.println(str);
         }

         //第二种遍历，把链表变为数组相关的内容进行遍历
         String[] strArray=new String[list.size()];
         list.toArray(strArray);
         for(int i=0;i<strArray.length;i++) //这里也可以改写为  foreach(String str:strArray)这种形式
         {
            System.out.println(strArray[i]);
         }

        //第三种遍历 使用迭代器进行相关遍历

         Iterator<String> ite=list.iterator();
         while(ite.hasNext())//判断下一个元素之后有值
         {
             System.out.println(ite.next());
         }
     }
    }

三种方法都是用来遍历ArrayList集合，第三种方法是采用迭代器的方法，该方法可以不用担心在遍历的过程中会超出集合的长度。

遍历 Map
~~~~~~~~

实例

.. code:: java

    import java.util.*;

    public class Test{
         public static void main(String[] args) {
          Map<String, String> map = new HashMap<String, String>();
          map.put("1", "value1");
          map.put("2", "value2");
          map.put("3", "value3");

          //第一种：普遍使用，二次取值
          System.out.println("通过Map.keySet遍历key和value：");
          for (String key : map.keySet()) {
           System.out.println("key= "+ key + " and value= " + map.get(key));
          }

          //第二种
          System.out.println("通过Map.entrySet使用iterator遍历key和value：");
          Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();
          while (it.hasNext()) {
           Map.Entry<String, String> entry = it.next();
           System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
          }

          //第三种：推荐，尤其是容量大时
          System.out.println("通过Map.entrySet遍历key和value");
          for (Map.Entry<String, String> entry : map.entrySet()) {
           System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
          }

          //第四种
          System.out.println("通过Map.values()遍历所有的value，但不能遍历key");
          for (String v : map.values()) {
           System.out.println("value= " + v);
          }
         }
    }

如何使用比较器
--------------

TreeSet和TreeMap的按照排序顺序来存储元素.
然而，这是通过比较器来精确定义按照什么样的排序顺序。
这个接口可以让我们以不同的方式来排序一个集合。

使用 ``Java Comparator``

总结
----

Java集合框架为程序员提供了预先包装的数据结构和算法来操纵他们。

集合是一个对象，可容纳其他对象的引用。集合接口声明对每一种类型的集合可以执行的操作。

集合框架的类和接口均在java.util包中。

任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。
